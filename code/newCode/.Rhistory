theOut<-do.call(rbind,tmpList)
write.csv(theOut,"t4r.csv",row.names=FALSE)
tmpList<-NULL
for(SNR in c(0,0.2,0.4,0.8,1.6,3.2)){
tmp <- rnorm(p*p)
dim(tmp) <- c(p,p)
myU<-svd(tmp)$u
tmp2 <- diag(p)
tmp2[1,1] <- p
tmp2[2,2] <- p
tmp3 <- diag(p)
for(i in 1:p)for(j in 1:p){
tmp3[i,j] <- rbinom(1,1,0.01)
}
Sigma <- myU %*% tmp2 %*% t(myU) + tmp3 %*% t(tmp3)
#mu <- list(rep(1, p), rep(-1, p), rep(0, p))
mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"t4rb.csv",row.names=FALSE)
theOut
library(xtable)
a <- read.csv("t4l.csv")
b <- read.csv("t4r.csv")
b <- b[,-1]
c <- read.csv("t4lb.csv")
d <- read.csv("t4rb.csv")
d <- d[,-1]
myD <- rbind(
cbind(a,b),
cbind(c,d)
)
print(xtable(myD,digits=4),include.rownames = FALSE)
library(xtable)
a <- read.csv("t1l.csv")
b <- read.csv("t1r.csv")
b <- b[,-1]
c <- read.csv("t1lb.csv")
d <- read.csv("t1rb.csv")
d <- d[,-1]
myD <- rbind(
cbind(a,b),
cbind(c,d)
)
print(xtable(myD,digits=4),include.rownames = FALSE)
library(xtable)
a <- read.csv("t2l.csv")
b <- read.csv("t2r.csv")
b <- b[,-1]
c <- read.csv("t2lb.csv")
d <- read.csv("t2rb.csv")
d <- d[,-1]
myD <- rbind(
cbind(a,b),
cbind(c,d)
)
print(xtable(myD,digits=4),include.rownames = FALSE)
library(xtable)
a <- read.csv("t3l.csv")
b <- read.csv("t3r.csv")
b <- b[,-1]
c <- read.csv("t3lb.csv")
d <- read.csv("t3rb.csv")
d <- d[,-1]
myD <- rbind(
cbind(a,b),
cbind(c,d)
)
print(xtable(myD,digits=4),include.rownames = FALSE)
n <- c(40, 40, 40)
p = 1000
repTime <- 10
tmpList<-NULL
for(Rho in seq(0,0.9,0.1)){
SNR <- 5
Sigma <- rep(Rho,p^2)
dim(Sigma) <- c(p,p)
diag(Sigma) <- rep(1,p)
mu <- list(rep(1, p), rep(-1, p), rep(0, p))
#mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"tu.csv",row.names=FALSE)
n <- c(40, 40, 40)
p = 1000
repTime <- 10
tmpList<-NULL
for(Rho in seq(0,0.9,0.1)){
SNR <- 5
Sigma <- rep(Rho,p^2)
dim(Sigma) <- c(p,p)
diag(Sigma) <- rep(1,p)
mu <- list(rep(1, p), rep(-1, p), rep(0, p))
#mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"tu.csv",row.names=FALSE)
n <- c(40, 40, 40)
p = 1000
repTime <- 10
tmpList<-NULL
for(Rho in seq(0,0.9,0.1)){
SNR <- 5
Sigma <- rep(Rho,p^2)
dim(Sigma) <- c(p,p)
diag(Sigma) <- rep(1,p)
mu <- list(rep(1, p), rep(-1, p), rep(0, p))
#mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"tu.csv",row.names=FALSE)
myWishart(10,1,1)
myWishart(10,1,diag(2))
myWishart(10,1,diag(2))
myWishart(10,1,diag(2))
tmp
?do.call
c
c
View(C)
View(C)
?clear
remove(c)
c
myWishart(10,1,diag(2))
n <- c(40, 40, 40)
p = 1000
repTime <- 10
tmpList<-NULL
for(Rho in seq(0,0.9,0.1)){
SNR <- 5
Sigma <- rep(Rho,p^2)
dim(Sigma) <- c(p,p)
diag(Sigma) <- rep(1,p)
mu <- list(rep(1, p), rep(-1, p), rep(0, p))
#mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"tu.csv",row.names=FALSE)
theOut
n <- c(40, 40, 40)
p = 1000
repTime <- 100
tmpList<-NULL
for(Rho in seq(0,0.9,0.1)){
SNR <- 5
Sigma <- rep(Rho,p^2)
dim(Sigma) <- c(p,p)
diag(Sigma) <- rep(1,p)
mu <- list(rep(1, p), rep(-1, p), rep(0, p))
#mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"tu.csv",row.names=FALSE)
theOut
Rho
n <- c(40, 40, 40)
p = 1000
repTime <- 100
tmpList<-NULL
for(Rho in seq(0,0.9,0.1)){
SNR <- 5
Sigma <- rep(Rho,p^2)
dim(Sigma) <- c(p,p)
diag(Sigma) <- rep(1,p)
mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values[-1]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
tmpFram<-doit()
tmpFram$Rho <-  Rho
tmpList<-c(tmpList,list(tmpFram))
}
n <- c(40, 40, 40)
p = 1000
repTime <- 10
tmpList<-NULL
for(Rho in seq(0,0.9,0.1)){
SNR <- 5
Sigma <- rep(Rho,p^2)
dim(Sigma) <- c(p,p)
diag(Sigma) <- rep(1,p)
mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values[-1]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
tmpFram<-doit()
tmpFram$Rho <-  Rho
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"tu.csv",row.names=FALSE)
theOut
theOut <- read.csv('tu.csv')
tSC <- data.frame(
rho=theOut$Rho,
power=theOut$SC,
method="Sc"
)
tCX <- data.frame(
rho=theOut$Rho,
power=theOut$CX,
method="CX"
)
tHBWW <- data.frame(
rho=theOut$Rho,
power=theOut$HBWW,
method="HBWW"
)
tZGZ <- data.frame(
rho=theOut$Rho,
power=theOut$ZGZ,
method="ZGZ"
)
tLFD <- data.frame(
rho=theOut$Rho,
power=theOut$Asy,
method="LFD"
)
df=rbind(tSC,tCX,tHBWW,tZGZ,tLFD)
library(ggplot2)
library(latex2exp)
myPlot <- ggplot(df,aes(rho,power,colour=method))+
geom_point()+
geom_line()+
ylab("Empirical power")+
xlab(TeX('$\\rho$'))+
scale_x_continuous(breaks=seq(0,0.9,0.1))+
guides(colour=guide_legend(title=NULL))+
theme_bw()
ggsave("figure1.eps",myPlot)
n <- c(40, 40, 40)
p = 1000
repTime <- 100
tmpList<-NULL
for(Rho in seq(0,0.9,0.1)){
SNR <- 5
Sigma <- rep(Rho,p^2)
dim(Sigma) <- c(p,p)
diag(Sigma) <- rep(1,p)
mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values[-1]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
tmpFram<-doit()
tmpFram$Rho <-  Rho
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"tu.csv",row.names=FALSE)
theOut <- read.csv('tu.csv')
tSC <- data.frame(
rho=theOut$Rho,
power=theOut$SC,
method="Sc"
)
tCX <- data.frame(
rho=theOut$Rho,
power=theOut$CX,
method="CX"
)
tHBWW <- data.frame(
rho=theOut$Rho,
power=theOut$HBWW,
method="HBWW"
)
tZGZ <- data.frame(
rho=theOut$Rho,
power=theOut$ZGZ,
method="ZGZ"
)
tLFD <- data.frame(
rho=theOut$Rho,
power=theOut$Asy,
method="LFD"
)
df=rbind(tSC,tCX,tHBWW,tZGZ,tLFD)
library(ggplot2)
library(latex2exp)
myPlot <- ggplot(df,aes(rho,power,colour=method))+
geom_point()+
geom_line()+
ylab("Empirical power")+
xlab(TeX('$\\rho$'))+
scale_x_continuous(breaks=seq(0,0.9,0.1))+
guides(colour=guide_legend(title=NULL))+
theme_bw()
ggsave("figure1.eps",myPlot)
n <- c(35, 35, 35)
p = 1000
repTime <- 5000
tmpList<-NULL
for(Rho in seq(0,0.9,0.1)){
SNR <- 5
Sigma <- rep(Rho,p^2)
dim(Sigma) <- c(p,p)
diag(Sigma) <- rep(1,p)
mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values[-1]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
tmpFram<-doit()
tmpFram$Rho <-  Rho
tmpList<-c(tmpList,list(tmpFram))
}
