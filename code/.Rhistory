a
b
a
b
a
b
a
b
a-b
a
b
a
b
a
b
a
b
mean(abs(a-b))
r=1
p=1000
n=10
TheLambda=p/150
if(r!=1){
D=diag(rep(sqrt(TheLambda),r))
}else{
D=TheLambda
dim(D)=c(1,1)
}
V=rnorm(p*r,0,1)
dim(V)=c(p,r)
V=svd(V)$u
theSigma=rep(0,p*p)
dim(theSigma)=c(p,p)
theSigma=V%*%D%*%D%*%t(V)+diag(rep(1,p))
#    beta=(diag(p)-V%*%t(V))%*%rnorm(p)
#    beta=beta/sqrt(sum(beta^2))
#    beta=sqrt(betaMod)*beta
myN=NULL
XuN=NULL
hhh=NULL
hhh2=NULL
for(i in 1:1000){
generateData=function(){
X=rep(0,n*p)
dim(X)=c(n,p)
U=rnorm(n*r,0,1)
dim(U)=c(n,r)
Z=rnorm(n*p,0,1)
dim(Z)=c(n,p)
X=U%*%D%*%t(V)+Z
}
X=generateData()
myE=rnorm(n,0,1)
dim(myE)=c(n,1)
hhh=c(hhh,sum(myE^2)/(t(myE)%*%solve(X%*%t(X))%*%myE))
hhh2=c(hhh2,sum(myE^2)/(t(myE)%*%solve(X%*%(diag(p)-V%*%t(V))%*%t(X))%*%myE))
}
par(mfrow=c(1,2))
hist(pnorm((hhh-(p-n))/sqrt(2*(p-n))))
hist(pnorm((hhh2-(p-n))/sqrt(2*(p-n))))
a=pnorm((hhh-(p-n))/sqrt(2*(p-n)))
b=pnorm((hhh2-(p-n))/sqrt(2*(p-n)))
qnorm(0.95)
qnorm(0.95)-1
(qnorm(0.95)-1)/sqrt(2)
(qnorm(0.975)-1)/sqrt(2)
install.packages("highD2pop")
vignette(package="highD2pop")
help(package="highD2pop")
CVind<-function(n){
l<-1
CVind<-matrix(1,n*(n-1)/2,n)
J<-K<-numeric(n*(n-1)/2)
for(j in 1:(n-1))
{
for(k in (j+1):n)
{
CVind[l,c(j,k)]<-0
J[l]<-j
K[l]<-k
l <- l + 1
}
}
return(list(CVind = CVind , J = J , K = K))
}
CVind(10)
CVind(5)
devtools::install_github("hadley/devtools")
.libPaths()
?lm
cars
data<- cars
str(cars)
lm(speed~dist)
lm(speed~dist,data)
?ls
?get
get(lm)
get("lm")
lm
globalenv
globalenv()
environment()
paraent.env()
pararent.env()
parent.env()
parent.env(globalenv())
search()
a<-parent.env(globalenv())
a
parent.env(a)
search()[1]
paramen.env(search()[1])
parent.env(search()[1])
?search
e <- new.env()
ls(e)
e$lm <- lm
ls(e)
e$lm
e$lm <- 1
ls(e)
a<- function(){1}
a<- 10
e$a <- 10
e$b <- e$a
e$a
e$b
e$a <- 20
e$a
e$b
e$a <- c(1,2,3)
e$b <- e$a
e$a[1] <- 1
e$b
e$a[1] <- 3
e$b
e$a
library(pryr)
library(help=pryr)
f
a<-lm
environment(a)
e$a <- a
environment(e$a)
j<-environment(e$a)
parent.evn(j)
parent.env(j)
parent.env(parent.env(j))
parent.env(parent.env(parent.env(j)))
parent.env(parent.env(parent.env(parent.env(j))))
parent.env(parent.env(parent.env(parent.env(f))))
parent.env(parent.env(parent.env(parent.env(pryr::f))))
parent.env(f)
parent.env(pryr::f)
parent.env(pryr::fget)
parent.env(lm)
e<-new.env()
e$a <-1
?formula
?formula
e
exp(1)
exp(1)-2.5
exp(1/2)-2.5
exp(1/2)-13/8
ans
4*(exp(1/2)-13/8)
setwd("~/glrtManovaP/code")
?eigen
n[1]=100
?list
?apply
?lapply
?rep
diag(3)
dataGen <- function(n, p, mu, Sigma) {
temp <- rnorm(n * p)
dim(temp) <- c(n, p)
temp2 <- eigen(Sigma, symmetric = TRUE)
temp %*% diag(temp2$values ^ (1 / 2)) %*% t(temp2$vectors) + outer(rep(1,n),mu)
}
# sample number
K=5
n <- c(100,100,100,100,100)
p=200
mu <- list(rep(0,p),rep(0,p),rep(0,p),rep(0,p),rep(0,p))
Sigma <- diag(p)
X <- lapply(1:K,function(k){
dataGen(n[k],p,mu[[k]],Sigma)
})
str(X)
X[[1]]
colMenas(X[[1]])
colMeans(X[[1]])
mean(X[[1]])
solve(Sigma)
dataGen <- function(n, p, mu, Sigma) {
temp <- rnorm(n * p)
dim(temp) <- c(n, p)
temp2 <- eigen(Sigma, symmetric = TRUE)
temp %*% diag(temp2$values ^ (1 / 2)) %*% t(temp2$vectors) + outer(rep(1,n),mu)
}
# sample number
K=5
n <- c(100,100,100,100,100)
p=200
mu <- list(rep(0,p),rep(0,p),rep(0,p),rep(0,p),rep(0,p))
Sigma <- diag(p)
X <- lapply(1:K,function(k){
dataGen(n[k],p,mu[[k]],Sigma)
})
transformedXbar <- lapply(X, function(X){
solve(Sigma)%*%colMeans(X)
})
temp <- lapply(1:p,function(i){
mySum <-0
for(j in 1:(K-1))for(l in (j+1):K){
mySum <- mySum + n[j]*n[l]/(n[j]+n[l])*(transformedXbar[[j]][i]-transformedXbar[[l]][i])^2/solve(Sigma)[i,i]
}
mySum
})
max(temp)
temp
dataGen <- function(n, p, mu, Sigma) {
temp <- rnorm(n * p)
dim(temp) <- c(n, p)
temp2 <- eigen(Sigma, symmetric = TRUE)
temp %*% diag(temp2$values ^ (1 / 2)) %*% t(temp2$vectors) + outer(rep(1,n),mu)
}
# sample number
K=5
n <- c(100,100,100,100,100)
p=200
mu <- list(rep(0,p),rep(0,p),rep(0,p),rep(0,p),rep(0,p))
Sigma <- diag(p)
X <- lapply(1:K,function(k){
dataGen(n[k],p,mu[[k]],Sigma)
})
transformedXbar <- lapply(X, function(X){
solve(Sigma)%*%colMeans(X)
})
temp <- sapply(1:p,function(i){
mySum <-0
for(j in 1:(K-1))for(l in (j+1):K){
mySum <- mySum + n[j]*n[l]/(n[j]+n[l])*(transformedXbar[[j]][i]-transformedXbar[[l]][i])^2/solve(Sigma)[i,i]
}
mySum
})
max(temp)
dataGen <- function(n, p, mu, Sigma) {
temp <- rnorm(n * p)
dim(temp) <- c(n, p)
temp2 <- eigen(Sigma, symmetric = TRUE)
temp %*% diag(temp2$values ^ (1 / 2)) %*% t(temp2$vectors) + outer(rep(1,n),mu)
}
# sample number
K=5
n <- c(100,100,100,100,100)
p=200
mu <- list(rep(0,p),rep(0,p),rep(0,p),rep(0,p),rep(0,p))
Sigma <- diag(p)
jjj <- rep(0,100)
for(myIterator in 1:100){
X <- lapply(1:K,function(k){
dataGen(n[k],p,mu[[k]],Sigma)
})
transformedXbar <- lapply(X, function(X){
solve(Sigma)%*%colMeans(X)
})
temp <- sapply(1:p,function(i){
mySum <-0
for(j in 1:(K-1))for(l in (j+1):K){
mySum <- mySum + n[j]*n[l]/(n[j]+n[l])*(transformedXbar[[j]][i]-transformedXbar[[l]][i])^2/solve(Sigma)[i,i]
}
mySum
})
jjj[myIterator] <- max(temp)- K*log(p)- K*(K-3)/2*log(log(p))
}
ecdf(jjj)
plot(ecdf(jjj))
plot(ecdf(jjj))
?txtProgressBar
?solve
?uniroot
uniroot(gamma-1)
uniroot(gamma-1,c(0,10))
uniroot(function(x){gamma(x)-1},c(0,10))
uniroot(function(x){gamma(x)-1},c(0.1,10))
gamma(0)
gamma(0.1)
gamma(1)
gamma(2)
gamma(3)
gamma(0.5)
uniroot(function(x){gamma(x)-4},c(1,10))
?inverse
?gamma
?psigamma
uniroot(function(t){gamma(t)-((K-1)/2)},c(1,100))
K
gamma(3)
plot(ecdf(jjj))
TheoryCDF <- function(x){
tmp <- uniroot(function(t){gamma(t)-((K-1)/2)},c(1,100))$root
exp(-tmp*exp(-x/K))
}
lines(TheoryCDF)
?plot
?curve
plot(ecdf(jjj))
curve(TheoryCDF)
?curve
plot(ecdf(jjj))
curve(TheoryCDF,from=-10,to=30)
plot(ecdf(jjj))
TheoryCDF <- function(x){
tmp <- uniroot(function(t){gamma(t)-((K-1)/2)},c(1,100))$root
exp(-tmp*exp(-x/K))
}
curve(TheoryCDF,from=-10,to=30,add=TRUE)
curve(ecdf(jjj))
plot(ecdf(jjj))
curve(TheoryCDF,from=-10,to=30,add=TRUE)
?rbind
X
rbind(X)
?unlist
?rbindlist
?do.call
?sample
sample(10,10)
sample.int(10)
?split
X[[1]]
seq(1,10)
split(seq(1,10),c(rep(1,5),rep(2,5)))
?rep
rep(c(1,2,3),times=(2,3,4))
rep(c(1,2,3),times=c(2,3,4))
?split
xcv<-matrix(c(1,2,3,4,5,6),3)
xcv
split(scv,c(1,2,2))
split(xcv,c(1,2,2))
split(xcv,c(1,2))
?gl
split(data.frame(xcv),c(1,2))
split(data.frame(xcv),c(11,2))
split(data.frame(xcv),c(1,1,2))
dataGen <- function(n, p, mu, Sigma) {
temp <- rnorm(n * p)
dim(temp) <- c(n, p)
temp2 <- eigen(Sigma, symmetric = TRUE)
temp %*% diag(temp2$values ^ (1 / 2)) %*% t(temp2$vectors) + outer(rep(1,n),mu)
}
# sample number
K=5
B=100
n <- c(20,20,20,20,20)
p=30
mu <- list(rep(0,p),rep(0,p),rep(0,p),rep(0,p),rep(0,p))
Sigma <- diag(p)
CXstat <- function(n,p,K,X){
transformedXbar <- lapply(X, function(X){
solve(Sigma)%*%colMeans(X)
})
temp <- sapply(1:p,function(i){
mySum <-0
for(j in 1:(K-1))for(l in (j+1):K){
mySum <- mySum + n[j]*n[l]/(n[j]+n[l])*(transformedXbar[[j]][i]-transformedXbar[[l]][i])^2/solve(Sigma)[i,i]
}
mySum
})
max(temp)
}
myPer <- function(n,p,X,K){
tmp <- do.call(rbind,X)
tmp <- tmp[sample.int(nrow(tmp)),]
tmp2 <- rep(1:K,times=n)
split(data.frame(tmp),tmp2)
}
jjj <- rep(0,100)
for(myIterator in 1:100){
X <- lapply(1:K,function(k){
dataGen(n[k],p,mu[[k]],Sigma)
})
theStat <- CXstat(n,p,K,X)
tmp <- rep(0,B)
for(xxx in 1:B){
tmp[xxx] <- CXstat(n,p,K,myPer(X))
}
if(mean(tmp>theStat)<=0.05)
jjj[myIterator] <- 1
}
# plot(ecdf(jjj))
#
# TheoryCDF <- function(x){
#     tmp <- uniroot(function(t){gamma(t)-((K-1)/2)},c(1,100))$root
#     exp(-tmp*exp(-x/K))
# }
#
# curve(TheoryCDF,from=-10,to=30,add=TRUE)
dataGen <- function(n, p, mu, Sigma) {
temp <- rnorm(n * p)
dim(temp) <- c(n, p)
temp2 <- eigen(Sigma, symmetric = TRUE)
temp %*% diag(temp2$values ^ (1 / 2)) %*% t(temp2$vectors) + outer(rep(1,n),mu)
}
# sample number
K=5
B=100
n <- c(20,20,20,20,20)
p=30
mu <- list(rep(0,p),rep(0,p),rep(0,p),rep(0,p),rep(0,p))
Sigma <- diag(p)
CXstat <- function(n,p,K,X){
transformedXbar <- lapply(X, function(X){
solve(Sigma)%*%colMeans(X)
})
temp <- sapply(1:p,function(i){
mySum <-0
for(j in 1:(K-1))for(l in (j+1):K){
mySum <- mySum + n[j]*n[l]/(n[j]+n[l])*(transformedXbar[[j]][i]-transformedXbar[[l]][i])^2/solve(Sigma)[i,i]
}
mySum
})
max(temp)
}
myPer <- function(n,p,K,X){
tmp <- do.call(rbind,X)
tmp <- tmp[sample.int(nrow(tmp)),]
tmp2 <- rep(1:K,times=n)
split(data.frame(tmp),tmp2)
}
jjj <- rep(0,100)
for(myIterator in 1:100){
X <- lapply(1:K,function(k){
dataGen(n[k],p,mu[[k]],Sigma)
})
theStat <- CXstat(n,p,K,X)
tmp <- rep(0,B)
for(xxx in 1:B){
tmp[xxx] <- CXstat(n,p,K,myPer(n,p,K,X))
}
if(mean(tmp>theStat)<=0.05)
jjj[myIterator] <- 1
}
# plot(ecdf(jjj))
#
# TheoryCDF <- function(x){
#     tmp <- uniroot(function(t){gamma(t)-((K-1)/2)},c(1,100))$root
#     exp(-tmp*exp(-x/K))
# }
#
# curve(TheoryCDF,from=-10,to=30,add=TRUE)
jjj
mean(jjj)
dataGen <- function(n, p, mu, Sigma) {
temp <- rnorm(n * p)
dim(temp) <- c(n, p)
temp2 <- eigen(Sigma, symmetric = TRUE)
temp %*% diag(temp2$values ^ (1 / 2)) %*% t(temp2$vectors) + outer(rep(1,n),mu)
}
# sample number
K=5
B=100
n <- c(20,20,20,20,20)
p=30
mu <- list(rep(0,p),rep(0,p),rep(0,p),rep(0,p),rep(0,p))
Sigma <- diag(p)
CXstat <- function(n,p,K,X){
transformedXbar <- lapply(X, function(X){
solve(Sigma)%*%colMeans(X)
})
temp <- sapply(1:p,function(i){
mySum <-0
for(j in 1:(K-1))for(l in (j+1):K){
mySum <- mySum + n[j]*n[l]/(n[j]+n[l])*(transformedXbar[[j]][i]-transformedXbar[[l]][i])^2/solve(Sigma)[i,i]
}
mySum
})
max(temp)
}
myPer <- function(n,p,K,X){
tmp <- do.call(rbind,X)
tmp <- tmp[sample.int(nrow(tmp)),]
tmp2 <- rep(1:K,times=n)
split(data.frame(tmp),tmp2)
}
jjj <- rep(0,1000)
for(myIterator in 1:1000){
X <- lapply(1:K,function(k){
dataGen(n[k],p,mu[[k]],Sigma)
})
theStat <- CXstat(n,p,K,X)
tmp <- rep(0,B)
for(xxx in 1:B){
tmp[xxx] <- CXstat(n,p,K,myPer(n,p,K,X))
}
if(mean(tmp>theStat)<=0.05)
jjj[myIterator] <- 1
}
# plot(ecdf(jjj))
#
# TheoryCDF <- function(x){
#     tmp <- uniroot(function(t){gamma(t)-((K-1)/2)},c(1,100))$root
#     exp(-tmp*exp(-x/K))
# }
#
# curve(TheoryCDF,from=-10,to=30,add=TRUE)
mean(jjj)
