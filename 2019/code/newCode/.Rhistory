power=theOut$Asy,
method="LFD"
)
df=rbind(tSC,tCX,tHBWW,tZGZ,tLFD)
cols <- c("Sc"="red","LFD"="magenta","CX"="orange1","HBWW"="green3","ZGZ"="lightskyblue2")
lineT <- c("Sc"=2,"LFD"=1,"CX"=3,"HBWW"=4,"ZGZ"=5)
Labels <- c("Sc"="Sc","LFD"="LFD","CX"="CX","HBWW"="HBWW","ZGZ"="ZGZ")
g <- guide_legend("Test methods",keywidth=unit(1,"cm"),override.aes=list(shape=NA))
library(ggplot2)
library(latex2exp)
myPlot <- ggplot(df,aes(SNR,power,colour=method,linetype=method))+
geom_point()+
geom_line()+
scale_linetype_manual(name="Methods",values=lineT,labels=Labels)+
scale_colour_manual(name="Methods",values=cols,labels=Labels)+
ylab("Empirical power")+
xlab("SNR")+
scale_x_continuous(breaks=seq(0,0.9,0.1))+
theme_bw()+
guides(colour=g,linetype=g)+
theme(
axis.title.y = element_text(size=rel(1.2)),
axis.title.x = element_text(size=rel(1.2)),
legend.position= c(0.9,0.4),
legend.margin = margin(3,3,3,3),
legend.box.background = element_rect()
)
ggsave(paste0(myFile,".eps"),myPlot)
}
jiujiuPlot("t1l")
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
myFile="t1l"
theOut <- read.csv(paste0(myFile,'.csv'))
tSC <- data.frame(
SNR=theOut$SNR,
power=theOut$SC,
method="Sc"
)
tCX <- data.frame(
SNR=theOut$SNR,
power=theOut$CX,
method="CX"
)
tHBWW <- data.frame(
SNR=theOut$SNR,
power=theOut$HBWW,
method="HBWW"
)
tZGZ <- data.frame(
SNR=theOut$SNR,
power=theOut$ZGZ,
method="ZGZ"
)
tLFD <- data.frame(
SNR=theOut$SNR,
power=theOut$Asy,
method="LFD"
)
df=rbind(tSC,tCX,tHBWW,tZGZ,tLFD)
cols <- c("Sc"="red","LFD"="magenta","CX"="orange1","HBWW"="green3","ZGZ"="lightskyblue2")
lineT <- c("Sc"=2,"LFD"=1,"CX"=3,"HBWW"=4,"ZGZ"=5)
Labels <- c("Sc"="Sc","LFD"="LFD","CX"="CX","HBWW"="HBWW","ZGZ"="ZGZ")
g <- guide_legend("Test methods",keywidth=unit(1,"cm"),override.aes=list(shape=NA))
library(ggplot2)
library(latex2exp)
myPlot <- ggplot(df,aes(SNR,power,colour=method,linetype=method))+
geom_point()+
geom_line()+
scale_linetype_manual(name="Methods",values=lineT,labels=Labels)+
scale_colour_manual(name="Methods",values=cols,labels=Labels)+
ylab("Empirical power")+
xlab("SNR")+
scale_x_continuous(breaks=seq(0,0.9,0.1))+
theme_bw()+
guides(colour=g,linetype=g)+
theme(
axis.title.y = element_text(size=rel(1.2)),
axis.title.x = element_text(size=rel(1.2)),
legend.position= c(0.9,0.4),
legend.margin = margin(3,3,3,3),
legend.box.background = element_rect()
)
myPlot
myPlot <- ggplot(df,aes(SNR,power,colour=method,linetype=method))+
geom_point()+
geom_line()+
scale_linetype_manual(name="Methods",values=lineT,labels=Labels)+
scale_colour_manual(name="Methods",values=cols,labels=Labels)+
ylab("Empirical power")+
xlab("SNR")+
scale_x_continuous(breaks=seq(0,0.9,0.1))+
#theme_bw()+
guides(colour=g,linetype=g)+
theme(
axis.title.y = element_text(size=rel(1.2)),
axis.title.x = element_text(size=rel(1.2)),
legend.position= c(0.9,0.4),
legend.margin = margin(3,3,3,3),
legend.box.background = element_rect()
)
myPlot
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
?ggsave
ggsave(paste0(myFile,".eps"),myPlot,width="10cm",height="8cm")
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
jiujiuPlot("t1l")
jiujiuPlot("t1lb")
jiujiuPlot("t1r")
jiujiuPlot("t1rb")
jiujiuPlot("t2l")
jiujiuPlot("t2lb")
jiujiuPlot("t2r")
jiujiuPlot("t2rb")
jiujiuPlot("t3l")
jiujiuPlot("t3lb")
jiujiuPlot("t3r")
jiujiuPlot("t3rb")
seq(0,4,0.4)
seq(0,4,0.5)
?seq
seq(0,0.8,0.1)
source('~/glrtManovaP/2019/code/newCode/t1Test.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/t4Test.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/t1Test.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/t2Test.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
install.packages("latex2exp")
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
source("test.R")
K = 3
n <- c(20, 20, 20)
p = 300
tmpList<-NULL
for(SNR in seq(0,4,0.5)){
tmp <- rnorm(p*p)
dim(tmp) <- c(p,p)
myU<-svd(tmp)$u
tmp2 <- diag(p)
tmp2[1,1] <- p
tmp2[2,2] <- p
tmp3 <- diag(p)
for(i in 1:p)for(j in 1:p){
tmp3[i,j] <- rbinom(1,1,0.01)
}
Sigma <- myU %*% tmp2 %*% t(myU) + tmp3 %*% t(tmp3)
mu <- list(rep(1, p), rep(-1, p), rep(0, p))
#mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"t2r.csv",row.names=FALSE)
tmpList<-NULL
for(SNR in seq(0,4,0.5)){
tmp <- rnorm(p*p)
dim(tmp) <- c(p,p)
myU<-svd(tmp)$u
tmp2 <- diag(p)
tmp2[1,1] <- p
tmp2[2,2] <- p
tmp3 <- diag(p)
for(i in 1:p)for(j in 1:p){
tmp3[i,j] <- rbinom(1,1,0.01)
}
Sigma <- myU %*% tmp2 %*% t(myU) + tmp3 %*% t(tmp3)
#mu <- list(rep(1, p), rep(-1, p), rep(0, p))
mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"t2rb.csv",row.names=FALSE)
source('~/regressionPaper/BayesFactor/formal/code/plot.R', echo=TRUE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
tmpList<-NULL
for(SNR in seq(0,4,0.5)){
K = 3
n <- c(20, 20, 20)
p = 300
Sigma <- diag(p)
for(i in 1:p)for(j in 1:p){
Sigma[i,j] <- 0.6^(abs(i-j))
}
mu <- list(rep(1, p), rep(-1, p), rep(0, p))
#mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
tmpList<-NULL
for(SNR in seq(0,4,0.5)){
K = 3
n <- c(20, 20, 20)
p = 300
Sigma <- diag(p)
for(i in 1:p)for(j in 1:p){
Sigma[i,j] <- 0.6^(abs(i-j))
}
mu <- list(rep(1, p), rep(-1, p), rep(0, p))
#mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"t1r.csv",row.names=FALSE)
tmpList<-NULL
for(SNR in seq(0,4,0.5)){
K = 3
n <- c(20, 20, 20)
p = 300
Sigma <- diag(p)
for(i in 1:p)for(j in 1:p){
Sigma[i,j] <- 0.6^(abs(i-j))
}
#mu <- list(rep(1, p), rep(-1, p), rep(0, p))
mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"t1rb.csv",row.names=FALSE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
tmpList<-NULL
for(SNR in seq(0,4,0.5)){
K = 3
n <- c(20, 20, 20)
p = 300
Sigma <- diag(p)
for(i in 1:p)for(j in 1:p){
Sigma[i,j] <- 0.6^(abs(i-j))
}
mu <- list(rep(1, p), rep(-1, p), rep(0, p))
#mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
tmpList<-NULL
for(SNR in seq(0,4,0.5)){
K = 3
n <- c(20, 20, 20)
p = 300
Sigma <- diag(p)
for(i in 1:p)for(j in 1:p){
Sigma[i,j] <- 0.6^(abs(i-j))
}
mu <- list(rep(1, p), rep(-1, p), rep(0, p))
#mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"t1r.csv",row.names=FALSE)
source('~/glrtManovaP/2019/code/newCode/2019plot.R', echo=TRUE)
source("test.R")
n <- c(25, 25, 25)
p = 800
tmpList<-NULL
for(SNR in seq(0,4,0.5)){
tmp <- rnorm(p*p)
dim(tmp) <- c(p,p)
myU<-svd(tmp)$u
tmp2 <- diag(p)
tmp2[1,1] <- p
tmp2[2,2] <- p
tmp3 <- diag(p)
for(i in 1:p)for(j in 1:p){
tmp3[i,j] <- rbinom(1,1,0.01)
}
Sigma <- myU %*% tmp2 %*% t(myU) + tmp3 %*% t(tmp3)
mu <- list(rep(1, p), rep(-1, p), rep(0, p))
#mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"t4r.csv",row.names=FALSE)
tmpList<-NULL
for(SNR in seq(0,4,0.5)){
tmp <- rnorm(p*p)
dim(tmp) <- c(p,p)
myU<-svd(tmp)$u
tmp2 <- diag(p)
tmp2[1,1] <- p
tmp2[2,2] <- p
tmp3 <- diag(p)
for(i in 1:p)for(j in 1:p){
tmp3[i,j] <- rbinom(1,1,0.01)
}
Sigma <- myU %*% tmp2 %*% t(myU) + tmp3 %*% t(tmp3)
#mu <- list(rep(1, p), rep(-1, p), rep(0, p))
mu <- list(c(rep(1, p/5),rep(0,4*p/5)), c(rep(0, p/5),rep(1, p/5),rep(0, 3*p/5)), rep(0, p))
# J
tmp <- lapply(1:K,function(i){
tmp <- rep(0,n[i]*K)
dim(tmp) <- c(n[i],K)
tmp[,i] <- 1/sqrt(n[i])
tmp
})
NEW.J <- do.call(rbind,tmp)
# C
tmp <- t(NEW.J)%*%rep(1,sum(n))
C <- eigen(diag(K)-tmp%*%t(tmp)/sum(n))$vectors[,-K]
#SNR
tmpMu <- do.call(cbind,mu)
for(i in 1:K){
tmpMu[,i] <- tmpMu[,i]*sqrt(n[i])
}
tmpMuF <- tmpMu%*%C
oSig <- eigen(Sigma, symmetric= TRUE)
tmpSigEig <- oSig$values#[-c(1,2)]
tmpCon <- sqrt(SNR*sqrt(sum(tmpSigEig^2))/sum(tmpMuF^2))
for(i in 1:length(mu)){
mu[[i]] <- mu[[i]]*tmpCon
}
(tmpFram<-doit())
tmpList<-c(tmpList,list(tmpFram))
}
theOut<-do.call(rbind,tmpList)
write.csv(theOut,"t4rb.csv",row.names=FALSE)
